#Использовать asserts
#Использовать logos
#Использовать ".."

Перем Лог;

Перем мВыводКоманды;
Перем ИмяФайлаИнформации;
Перем РабочийКаталог;
Перем ПутьКГит;
Перем СистемнаяИнформация;
Перем ЭтоWindows;

/////////////////////////////////////////////////////////////////////////
// Программный интерфейс

/////////////////////////////////////////////////////////////////////////
// Процедуры-обертки над git

// Выполняет инициализиацию репозитория в рабочем каталоге
//
Процедура Инициализировать() Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("init");
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры

// Получает состояние репозитория
//
//  Возвращаемое значение:
//   Строка   - Вывод команды
//
Функция Статус() Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("status");
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
    Возврат ПолучитьВыводКоманды();
    
КонецФункции

// Добавляет файл в индекс git
//
// Параметры:
//   ПутьКДобавляемомуФайлу - Строка - Путь к файлу на диске
//
Процедура ДобавитьФайлВИндекс(Знач ПутьКДобавляемомуФайлу) Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("add");
    ПараметрыЗапуска.Добавить(ПутьКДобавляемомуФайлу);
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры

// Очищает установленные переменные системы
Процедура ОчиститьУстановленныеПеременные()
    
    УстановитьДатуКоммита("");

КонецПроцедуры
// Установливает переменную системы GIT_COMMITTER_DATE
Процедура УстановитьДатуКоммита(Знач Дата)
     
    СистемнаяИнформация.УстановитьПеременнуюСреды("GIT_COMMITTER_DATE", Дата);

КонецПроцедуры // УстановитьПеременнуюСреды()

// Устанавливает коммитера комментария в дополнительную секцию локальной настройки репозитория
//
// Параметры:
//   Коммитер - Строка - представление коммитера комментария в формате: автор <email@com>
//   ТребуетсяВосстановлениеНастроек - Булево - устанавливается в истина для последующего восстановления
Процедура УстановитьКоммитера(Знач Коммитер, ТребуетсяВосстановлениеНастроек = Ложь)

    РегуляркаДляПочты =  Новый РегулярноеВыражение ("[a-zA-Z1-9\-\._]+@[a-z1-9]+(.[a-z1-9]+){1,}");
    КоллекцияСовпадений = РегуляркаДляПочты.НайтиСовпадения(Коммитер);
    Если КоллекцияСовпадений.Количество() = 0 Тогда
        ВызватьИсключение "Передан не корректное наименование Коммитера. Не удалось найти email";
    КонецЕсли;

    Наименование = Лев(Коммитер, СтрНайти(Коммитер, "<")-1);
    Почта = КоллекцияСовпадений[0].Значение; // Должно быть только одно значение


    НастройкаНаименования = "user.name";
    НастройкаПочты = "user.email";

    ТекущееНаименование = ПолучитьНастройку(НастройкаНаименования, РежимУстановкиНастроек.Локально);
    ТекущаяПочта = ПолучитьНастройку(НастройкаПочты, РежимУстановкиНастроек.Локально);

    // Сохранение в отдельную секцию "bak"

    ТребуетсяСохранениеВСекцию_bak = НЕ (ПустаяСтрока(ТекущееНаименование) И ПустаяСтрока(ТекущаяПочта));
    Если ТребуетсяСохранениеВСекцию_bak Тогда
        
        // Установка новых значений в секцию bak
        УстановитьНастройку("bak."+ НастройкаНаименования, ТекущееНаименование );
        УстановитьНастройку("bak."+ НастройкаПочты, ТекущаяПочта);

        ТребуетсяВосстановлениеНастроек = Истина
    КонецЕсли;

    // Установим новые значения
    УстановитьНастройку(НастройкаНаименования, Наименование );
    УстановитьНастройку(НастройкаПочты, Почта);

КонецПроцедуры

// Восстановление коммитера комментария из резервной секции
Процедура ВосстановитьКоммитера()
    
    НастройкаНаименования = "user.name";
    НастройкаПочты = "user.email";

    ТекущееНаименование = ПолучитьНастройку(НастройкаНаименования, РежимУстановкиНастроек.Локально);
    ТекущаяПочта = ПолучитьНастройку(НастройкаПочты, РежимУстановкиНастроек.Локально);
    
    Наименование_bak = ПолучитьНастройку("bak."+НастройкаНаименования, РежимУстановкиНастроек.Локально);
    Почта_bak = ПолучитьНастройку("bak."+НастройкаПочты, РежимУстановкиНастроек.Локально);
    
    
    // Установим новые значения
    Если ТекущееНаименование <> Наименование_bak Тогда УстановитьНастройку(НастройкаНаименования, Наименование_bak); КонецЕсли;
    Если ТекущаяПочта <> Почта_bak Тогда УстановитьНастройку(НастройкаПочты, Почта_bak); КонецЕсли;
    
    УдалитьСекциюНастройки("bak.user", РежимУстановкиНастроек.Локально);
           
    
КонецПроцедуры

// Зафиксировать проиндексированные изменения в истории git
//
// Параметры:
//   ТекстСообщения - Строка/Неопределено - Текст сообщения коммита
// 	 ПутьКФайлуКоммита - Строка/Неопределено - путь к файлу с текстом комментария
//	 АвторКоммита - Строка/Неопределено - Автор комментария, передается в случае необходимости
//   ДатаАвтораКоммита - Дата/Неопределено - Дата комментария
//   Коммитер - Строка/Неопределено - Коммитер комментария, передается в случае, если требуется
//   ДатаКоммита - Дата/Неопределено - Дата произведения коммита
//   ПроиндексироватьОтслеживаемыеФайлы - Булево - Автоматически добавить
//		в индекс файлы, уже отслеживаемые git
//
Процедура Закоммитить(Знач ТекстСообщения = Неопределено, 
                        Знач ПутьКФайлуКоммита = Неопределено, 
                         Знач АвторКоммита = Неопределено, 
                        Знач ДатаАвтораКоммита = Неопределено,
                        Знач Коммитер = Неопределено, 
                        Знач ДатаКоммита = Неопределено, 
                        Знач ПроиндексироватьОтслеживаемыеФайлы = Ложь) Экспорт

    НадоВосстановитьКоммитера = Ложь;
    НадоОчиститьУстановленныеПеременные = ложь;    

    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("commit");

    Если ПроиндексироватьОтслеживаемыеФайлы Тогда
        ПараметрыЗапуска.Добавить("-a");
    КонецЕсли;

    Если Не ПустаяСтрока(ПутьКФайлуКоммита) Тогда
        ПараметрыЗапуска.Добавить("-F");
        ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ПутьКФайлуКоммита));
    Иначе 
        ПараметрыЗапуска.Добавить("-m");
           ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ТекстСообщения));
    КонецЕсли;

    Если Не ПустаяСтрока(Коммитер) Тогда

        УстановитьКоммитера(Коммитер, НадоВосстановитьКоммитера);

    КонецЕсли;

    Если ЗначениеЗаполнено(ДатаКоммита) Тогда
        НадоОчиститьУстановленныеПеременные = Истина;
        УстановитьДатуКоммита(ДатаКоммита);
    КонецЕсли;

       Если Не ПустаяСтрока(АвторКоммита) Тогда
          ПараметрыЗапуска.Добавить("--author="+ ОбернутьВКавычки(АвторКоммита));
     КонецЕсли;

    Если ЗначениеЗаполнено(ДатаАвтораКоммита) Тогда
        ПараметрыЗапуска.Добавить("--date="+ ОбернутьВКавычки(ДатаАвтораКоммита));
    КонецЕсли;

    Попытка
        ВыполнитьКоманду(ПараметрыЗапуска);
    Исключение

        Если НадоОчиститьУстановленныеПеременные Тогда ОчиститьУстановленныеПеременные() КонецЕсли;
        Если НадоВосстановитьКоммитера Тогда ВосстановитьКоммитера() КонецЕсли;

        ВызватьИсключение; 
    КонецПопытки;

    Если НадоОчиститьУстановленныеПеременные Тогда ОчиститьУстановленныеПеременные() КонецЕсли;
    Если НадоВосстановитьКоммитера Тогда ВосстановитьКоммитера() КонецЕсли;

КонецПроцедуры

// Вывести историю репозитория
//
// Параметры:
//   Графически - Булево - Вывести историю в виде графа
//
Процедура ВывестиИсторию(Графически = Ложь) Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("log");
    
    Если Графически Тогда
        ПараметрыЗапуска.Добавить("--graph");
    КонецЕсли;
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры

// Получить изменения из удаленного репозитория
//
// Параметры:
//   ИмяРепозитория - Строка - Имя репозитория, из которого необходимо
// 		получить изменения
//   ИмяВетки - Строка - Имя ветки, из которой необходимо получить изменения
//
Процедура Получить(Знач ИмяРепозитория = "", Знач ИмяВетки = "") Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("pull");
    
    Если ЗначениеЗаполнено(ИмяРепозитория) Тогда
        ПараметрыЗапуска.Добавить(ИмяРепозитория);
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ИмяВетки) Тогда
        ПараметрыЗапуска.Добавить(ИмяВетки);
    КонецЕсли;
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры

// Отправить изменения в удаленный репозиторий
//
// Параметры:
//   ИмяРепозитория - Строка - Имя репозитория, в который необходимо
// 		отправить изменения
//   ИмяВетки - Строка - Имя ветки, в который необходимо отправить изменения
//
Процедура Отправить(Знач ИмяРепозитория = "", Знач ИмяВетки = "") Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("push");
    
    Если ЗначениеЗаполнено(ИмяРепозитория) Тогда
        ПараметрыЗапуска.Добавить(ИмяРепозитория);
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ИмяВетки) Тогда
        ПараметрыЗапуска.Добавить(ИмяВетки);
    КонецЕсли;
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры

// Клонировать удаленный репозиторий
//
// Параметры:
//   ПутьУдаленномуРепозиторию - Строка - Путь к удаленному репозиторию
//   КаталогКлонирования - Строка - Каталог, в который необходимо выполнить
//		клонирование
//
Процедура КлонироватьРепозиторий(Знач ПутьУдаленномуРепозиторию, Знач КаталогКлонирования = "") Экспорт

    // TODO: Потенциально bad-design. По-хорошему это не относится к объекту
    // ГитРепозиторий, это что-то вроде ГитМенеджер.
   
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("clone");
    ПараметрыЗапуска.Добавить(ПутьУдаленномуРепозиторию);
    
    Если ЗначениеЗаполнено(КаталогКлонирования) Тогда
        ПараметрыЗапуска.Добавить(ОбернутьВКавычки(КаталогКлонирования));
    КонецЕсли;
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры

//////////////////////////////////////////////
// Работа с ветками

// Получить имя текущей ветки
//
//  Возвращаемое значение:
//   Строка   - Имя текущей ветки
//
Функция ПолучитьТекущуюВетку() Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("symbolic-ref");
    ПараметрыЗапуска.Добавить("--short");
    ПараметрыЗапуска.Добавить("HEAD");
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
    ВыводКоманды = ПолучитьВыводКоманды();
    
    Возврат ВыводКоманды;
    
КонецФункции

// Выполнить переход в ветку
//
// Параметры:
//   ИмяВетки - Строка - Имя ветки, в которую необходимо перейти
//   СоздатьНовую - Булево - Флаг необходимости создания новой ветки
//
// @unstable
//
Процедура ПерейтиВВетку(Знач ИмяВетки, Знач СоздатьНовую = Ложь) Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("checkout");
    
    Если СоздатьНовую Тогда
        ПараметрыЗапуска.Добавить("-b");
    КонецЕсли;
    
    ПараметрыЗапуска.Добавить(ИмяВетки);
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры

// Создать новую ветку без выполнения перехода в нее
//
// Параметры:
//   ИмяВетки - Строка - Имя создаваемой ветки
//
Процедура СоздатьВетку(Знач ИмяВетки) Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("branch");    
    ПараметрыЗапуска.Добавить(ИмяВетки);
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры

// Получить список веток
//
// Параметры:
//   ВключаяУдаленные - Булево - Включать информацию об удаленных ветках
//
//  Возвращаемое значение:
//   ТаблицаЗначений   - Таблица с информацией о текущих ветках.
//		Содержит колонки:
//			Текущая - Булево - Признак текущей ветки
//			Имя - Строка - Имя ветки
//
Функция ПолучитьСписокВеток(Знач ВключаяУдаленные = Ложь) Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("branch");    
    
    Если ВключаяУдаленные Тогда
        ПараметрыЗапуска.Добавить("-a");    
    КонецЕсли;
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
    ВыводКоманды = ПолучитьВыводКоманды();
    
    ТаблицаВеток = Новый ТаблицаЗначений();
    ТаблицаВеток.Колонки.Добавить("Текущая");
    ТаблицаВеток.Колонки.Добавить("Имя");
    
    ЧислоСтрок = СтрЧислоСтрок(ВыводКоманды);
    
    Для сч = 1 По ЧислоСтрок Цикл
        
        Ветка = ТаблицаВеток.Добавить();
        
        Строка = СтрПолучитьСтроку(ВыводКоманды, сч);
        
        Ветка.Текущая = Лев(Строка, 1) = "*";
        
        Строка = Прав(Строка, СтрДлина(Строка) - 2);
        Ветка.Имя = Строка;
        
    КонецЦикла;
    
    Возврат ТаблицаВеток;
    
    
КонецФункции

// Работа с ветками
//////////////////////////////////////////////

//////////////////////////////////////////////
// Работа с внешними репозиториями

// Добавить внешний репозиторий
//
// Параметры:
//   ИмяРепозитория - Строка - Имя внешнего репозитория
//   АдресВнешнегоРепозитория - Строка - Путь к внешнему репозиторию
//
Процедура ДобавитьВнешнийРепозиторий(Знач ИмяРепозитория, Знач АдресВнешнегоРепозитория) Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("remote");
    ПараметрыЗапуска.Добавить("add");
    
    ПараметрыЗапуска.Добавить(ИмяРепозитория);
    ПараметрыЗапуска.Добавить(АдресВнешнегоРепозитория);
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры

// Удалить внешний репозиторий
//
// Параметры:
//   ИмяРепозитория - Строка - Имя внешнего репозитория
//
Процедура УдалитьВнешнийРепозиторий(Знач ИмяРепозитория) Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("remote");
    ПараметрыЗапуска.Добавить("remove");
    
    ПараметрыЗапуска.Добавить(ИмяРепозитория);
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры

// Получить список внешних репозиториев
//
//  Возвращаемое значение:
//   ТаблицаЗначений   - Таблица с информацией о внешних репозиториях.
//		Содержит колонки:
//			Имя - Строка - Имя внешнего репозитория
//			Адрес - Строка - Путь к внешнему репозиторию
//			Режим - Строка - Режим работы с внешним репозиторием (push/fetch)
//
Функция ПолучитьСписокВнешнихРепозиториев() Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("remote");
    ПараметрыЗапуска.Добавить("-v");
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
    ВыводКоманды = ПолучитьВыводКоманды();
    
    ТаблицаВнешнихРепозиториев = Новый ТаблицаЗначений;
    ТаблицаВнешнихРепозиториев.Колонки.Добавить("Имя");
    ТаблицаВнешнихРепозиториев.Колонки.Добавить("Адрес");
    ТаблицаВнешнихРепозиториев.Колонки.Добавить("Режим");
    
    ЧислоСтрок = СтрЧислоСтрок(ВыводКоманды);
    
    Для сч = 1 По ЧислоСтрок Цикл
        
        ВнешнийРепозиторий = ТаблицаВнешнихРепозиториев.Добавить();
        
        Строка = СтрПолучитьСтроку(ВыводКоманды, сч);
        СимволТаб = СтрНайти(Строка, Символы.Таб);
        СимволПробел = СтрНайти(Строка, " ");
        
        ИмяВнешнегоРепозитория = Лев(Строка, СимволТаб - 1);
        АдресВнешнегоРепозитория = Сред(Строка, СимволТаб + 1, СимволПробел - СимволТаб - 1);
        РежимВнешнегоРепозитория = Прав(Строка, СтрДлина(Строка) - СимволПробел);
        РежимВнешнегоРепозитория = Сред(РежимВнешнегоРепозитория, 2, СтрДлина(РежимВнешнегоРепозитория) - 2);
        
        ВнешнийРепозиторий.Имя 		= ИмяВнешнегоРепозитория;
        ВнешнийРепозиторий.Адрес 	= АдресВнешнегоРепозитория;
        ВнешнийРепозиторий.Режим 	= РежимВнешнегоРепозитория;
        
    КонецЦикла;
    
    Возврат ТаблицаВнешнихРепозиториев;
    
КонецФункции

// Работа с внешними репозиториями
//////////////////////////////////////////////

//////////////////////////////////////////////
// Работа с подмодулями

// Добавить новый подмодуль
//
// Параметры:
//   АдресВнешнегоРепозитория - Строка - Путь к внешнему репозиторию
//   Местоположение - Строка - Каталог, в который необходимо поместить
//		указанный подмодуль
//   Ветка - Строка - Имя ветки внешнего репозитория для получения
//   ИмяПодмодуля - Строка - Имя, под которым подмодуль будет сохранен
//		в настройках
//
Процедура ДобавитьПодмодуль(Знач АдресВнешнегоРепозитория, 
    Знач Местоположение = "",
    Знач Ветка = "",
    Знач ИмяПодмодуля = "") Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("submodule");
    ПараметрыЗапуска.Добавить("add");
    
    Если ЗначениеЗаполнено(Ветка) Тогда
        ПараметрыЗапуска.Добавить("-b");
        ПараметрыЗапуска.Добавить(Ветка);
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ИмяПодмодуля) Тогда
        ПараметрыЗапуска.Добавить("--name");
        ПараметрыЗапуска.Добавить(ИмяПодмодуля);
    КонецЕсли;
    
    ПараметрыЗапуска.Добавить(АдресВнешнегоРепозитория);
    
    Если ЗначениеЗаполнено(Местоположение) Тогда
        ПараметрыЗапуска.Добавить(Местоположение);
    КонецЕсли;
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры

// Обновить данные о зарегистрированных подмодулях
//
// Параметры:
//   Инициализировать - Булево - Выполнять инициализацию подмодуля
//   Рекурсивно - Рекурсивно - Обновлять подмодули подмодулей
//
Процедура ОбновитьПодмодули(Знач Инициализировать = Ложь, Знач Рекурсивно = Ложь) Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("submodule");
    ПараметрыЗапуска.Добавить("update");
    
    Если Инициализировать Тогда
        ПараметрыЗапуска.Добавить("--init");
    КонецЕсли;
    
    Если Рекурсивно Тогда
        ПараметрыЗапуска.Добавить("--recursive");
    КонецЕсли;
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры

// Получить состояние подмодулей
//
//  Возвращаемое значение:
//   ТаблицаЗначений - Таблица с информацией о подмодулях.
//		Содержит колонки:
//			ХэшКоммита - Строка - Хэш коммита, на который указывает подмодуль
//			Имя - Строка - Имя подмодуля
//			Указатель - Строка - указатель на внешний репозиторий
//
Функция ПолучитьСостояниеПодмодулей() Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("submodule");
    ПараметрыЗапуска.Добавить("status");
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
    ВыводКоманды = ПолучитьВыводКоманды();
    
    ТаблицаПодмодулей = Новый ТаблицаЗначений;
    ТаблицаПодмодулей.Колонки.Добавить("ХэшКоммита");
    ТаблицаПодмодулей.Колонки.Добавить("Имя");
    ТаблицаПодмодулей.Колонки.Добавить("Указатель");
    
    ЧислоСтрок = СтрЧислоСтрок(ВыводКоманды);
    
    Для сч = 1 По ЧислоСтрок Цикл
        
        ДанныеПодмодуля = ТаблицаПодмодулей.Добавить();
        
        Строка = СтрПолучитьСтроку(ВыводКоманды, сч);
        Если ПустаяСтрока(Строка) Тогда
            Продолжить;
        КонецЕсли;
        
        ДанныеСтроки = СтрРазделить(Строка, " ");
        ДанныеПодмодуля.ХэшКоммита 	= ДанныеСтроки[0];
        ДанныеПодмодуля.Имя 		= ДанныеСтроки[1];
        ДанныеПодмодуля.Указатель 	= Сред(ДанныеСтроки[2], 2, СтрДлина(ДанныеСтроки[2]) - 2);
        
    КонецЦикла;
    
    Возврат ТаблицаПодмодулей;
    
КонецФункции

// Работа с подмодулями
//////////////////////////////////////////////

//////////////////////////////////////////////
// Работа с настройками git

// Получить значение настройки git
//
// Параметры:
//   ИмяНастройки - Строка - Имя настройки
//
//  Возвращаемое значение:
//   Строка - Значение настройки
//
Функция ПолучитьНастройку(Знач ИмяНастройки, Знач РежимУстановкиНастроек = Неопределено) Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("config");    
    ПараметрыЗапуска.Добавить(ИмяНастройки);
    

    Если РежимУстановкиНастроек <> Неопределено Тогда
        ПараметрыЗапуска.Добавить(РежимУстановкиНастроек);
    КонецЕсли;
    

    ВыполнитьКоманду(ПараметрыЗапуска);
    
    ВыводКоманды = СокрЛП(ПолучитьВыводКоманды());
    
    Возврат ВыводКоманды;
    
КонецФункции

// Установить настройку git
//
// Параметры:
//   ИмяНастройки - Строка - Имя настройки
//   ЗначениеНастройки - Строка - Устанавливаемое значение
//   РежимУстановкиНастроек - РежимУстановкиНастроек - Режим установки настройки.
//		Значения параметра содержатся в перечислении РежимУстановкиНастроек
//
Процедура УстановитьНастройку(Знач ИмяНастройки, Знач ЗначениеНастройки, Знач РежимУстановкиНастроек = Неопределено) Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("config");
    
    Если РежимУстановкиНастроек <> Неопределено Тогда
        ПараметрыЗапуска.Добавить(РежимУстановкиНастроек);
    КонецЕсли;
    
    ПараметрыЗапуска.Добавить(ИмяНастройки);
    ПараметрыЗапуска.Добавить(ЗначениеНастройки);
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры

// Удаление секции настроек git
//
// Параметры:
//   ИмяСекции - Строка - Имя секции
//   РежимУстановкиНастроек - РежимУстановкиНастроек - Режим установки настройки.
Процедура УдалитьСекциюНастройки(Знач ИмяСекции, Знач РежимУстановкиНастроек = Неопределено) Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("config");
   
    Если РежимУстановкиНастроек <> Неопределено Тогда
        ПараметрыЗапуска.Добавить(РежимУстановкиНастроек);
    КонецЕсли;
    
    ПараметрыЗапуска.Добавить("--remove-section");
    ПараметрыЗапуска.Добавить(ИмяСекции);
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры 


// Получить список настроек git
//
// Параметры:
//   РежимУстановкиНастроек - РежимУстановкиНастроек - Уровень, на котором
//		необходимо искать значения настроек
//
//  Возвращаемое значение:
//   Соответствие - Список настроек.
//		Ключ соответствия - ключ настройки
//		Значение соответствия - значение настройки
//
Функция ПолучитьСписокНастроек(Знач РежимУстановкиНастроек = Неопределено) Экспорт
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить("config");
    ПараметрыЗапуска.Добавить("--list");
    
    Если РежимУстановкиНастроек <> Неопределено Тогда
        ПараметрыЗапуска.Добавить(РежимУстановкиНастроек);
    КонецЕсли;
    
    ВыполнитьКоманду(ПараметрыЗапуска);
    
    ВыводКоманды = ПолучитьВыводКоманды();
    
    СписокНастроек = Новый Соответствие();
    
    ЧислоСтрок = СтрЧислоСтрок(ВыводКоманды);
    
    Для сч = 1 По ЧислоСтрок Цикл
        
        Строка = СтрПолучитьСтроку(ВыводКоманды, сч);
        СимволРавно = СтрНайти(Строка, "=");
        
        ИмяНастройки = Лев(Строка, СимволРавно - 1);
        ЗначениеНастройки = Прав(Строка, СтрДлина(Строка) - СимволРавно);
        
        СписокНастроек.Вставить(ИмяНастройки, ЗначениеНастройки);
        
    КонецЦикла;
    
    Возврат СписокНастроек;
    
КонецФункции

// Работа с настройками git
//////////////////////////////////////////////

// Выполнение произвольной команды git
//
// Параметры:
//   Параметры - Массив - Массив строковых аргументов, передаваемых в командную
//		строку. Добавляются после исполняемого файла.
//
Процедура ВыполнитьКоманду(Знач Параметры) Экспорт
    
    //NOTICE: https://github.com/oscript-library/v8runner 
    //Apache 2.0 
    
    ПроверитьВозможностьВыполненияКоманды();
    
    КодВозврата = ЗапуститьИПодождать(Параметры);
    Если КодВозврата <> 0 Тогда
        Лог.Ошибка("Получен ненулевой код возврата "+КодВозврата+". Выполнение скрипта остановлено!");
        ВызватьИсключение ПолучитьВыводКоманды();
    Иначе
        Лог.Отладка("Код возврата равен 0");
    КонецЕсли;
    
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// Работа со свойствами класса

// Получить текущий рабочий каталог.
//
//  Возвращаемое значение:
//   Строка - Путь к рабочему каталогу
//
Функция ПолучитьРабочийКаталог() Экспорт
    Возврат РабочийКаталог;
КонецФункции

// Установить текущий рабочий каталог.
// Все команды git будут выполняться относительно указанного каталога.
//
// Параметры:
//   ПутьРабочийКаталог - Строка - Путь к рабочему каталогу.
//		Может быть относительным.
//
Процедура УстановитьРабочийКаталог(Знач ПутьРабочийКаталог) Экспорт
    
    Файл_РабочийКаталог = Новый Файл(ПутьРабочийКаталог);
    Ожидаем.Что(Файл_РабочийКаталог.Существует(), СтрШаблон("Рабочий каталог <%1> не существует.", ПутьРабочийКаталог)).ЭтоИстина();
    
    РабочийКаталог = Файл_РабочийКаталог.ПолноеИмя;
    
КонецПроцедуры

// Получить путь к исполняемому файлу git.
//
//  Возвращаемое значение:
//   Строка - Путь к исполняемому файлу.
//		По умолчанию содержит значение "git".
//
Функция ПолучитьПутьКГит() Экспорт
    Возврат ПутьКГит;
КонецФункции

// Установить путь к исполняемому файлу git.
//
// Параметры:
//   Путь - Строка - Путь к исполняемому файлу.
//
Процедура УстановитьПутьКГит(Знач Путь) Экспорт
    ПутьКГит = Путь;
КонецПроцедуры

// Получить вывод последней выполненной команды.
//
//  Возвращаемое значение:
//   Строка - Вывод команды
//
Функция ПолучитьВыводКоманды() Экспорт
    Возврат мВыводКоманды;
КонецФункции

// Установить вывод последней выполненной команды.
//
// Параметры:
//   Сообщение - Строка - Вывод команды
//
Процедура УстановитьВывод(Знач Сообщение)
    мВыводКоманды = Сообщение;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции

// Проверяет возможность выполнить команду.
//
Процедура ПроверитьВозможностьВыполненияКоманды()
    
    Ожидаем.Что(ПолучитьРабочийКаталог(), "Рабочий каталог не установлен.").Заполнено();
    
    Лог.Отладка("РабочийКаталог: " + ПолучитьРабочийКаталог());
    
КонецПроцедуры

// Запустить команду в операционной системе с ожиданием ее выполнения 
//
// Параметры:
//   Параметры - Массив - Массив строковых аргументов, передаваемых в командную
//		строку. Добавляются после исполняемого файла.
//
//  Возвращаемое значение:
//   Число - Код возврата приложения
//
Функция ЗапуститьИПодождать(Знач Параметры)
    
    //NOTICE: https://github.com/oscript-library/v8runner 
    //Apache 2.0
    // ЗапуститьПриложение переделано на СоздатьПроцесс и чтение данных вывода 
    
    СтрокаЗапуска = "";
    СтрокаДляЛога = "";
    Для Каждого Параметр Из Параметры Цикл
        
        СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
        
        Если Лев(Параметр,2) <> "/P" и Лев(Параметр,25) <> "/ConfigurationRepositoryP" Тогда
            СтрокаДляЛога = СтрокаДляЛога + " " + Параметр;
        КонецЕсли;
        
    КонецЦикла;
    
    Приложение = ОбернутьВКавычки(ПолучитьПутьКГит());
    Лог.Отладка(Приложение + СтрокаДляЛога);
    
    Если ЭтоWindows = Ложь Тогда 
        СтрокаЗапуска = "sh -c '" + Приложение + СтрокаЗапуска + "'";
    Иначе
        СтрокаЗапуска = Приложение + СтрокаЗапуска;
    КонецЕсли;
    
    ЗаписьXML = Новый ЗаписьXML();
    ЗаписьXML.УстановитьСтроку();
    
    Процесс = СоздатьПроцесс(СтрокаЗапуска, РабочийКаталог, Истина, , КодировкаТекста.UTF8);
    Процесс.Запустить();
    
    Пока НЕ Процесс.Завершен ИЛИ Процесс.ПотокВывода.ЕстьДанные Цикл
        СтрокаВывода = "" + Процесс.ПотокВывода.ПрочитатьСтроку() + Символы.ПС;
        ЗаписьXML.ЗаписатьБезОбработки(СтрокаВывода);
    КонецЦикла;
    
    Если Процесс.КодВозврата <> 0 Тогда
        Лог.Ошибка("Код возврата: " + Процесс.КодВозврата);
        ТекстВывода = Процесс.ПотокОшибок.Прочитать();
        УстановитьВывод(ТекстВывода);
        ВызватьИсключение ТекстВывода;
    КонецЕсли;
    
    РезультатРаботыПроцесса = ЗаписьXML.Закрыть();
    УстановитьВывод(РезультатРаботыПроцесса);
    
    Возврат Процесс.КодВозврата;
    
КонецФункции

// Оборачивает переданную строку в кавычки, если она еще не обернута.
//
// Параметры:
//   Строка - Строка - Входящая строка
//
//  Возвращаемое значение:
//   Строка - Строка, обернутая в кавычки
//
Функция ОбернутьВКавычки(Знач Строка)
    
    //NOTICE: https://github.com/oscript-library/v8runner 
    //Apache 2.0 
    
    Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
        Возврат Строка;
    Иначе
        Возврат """" + Строка + """";
    КонецЕсли;
    
КонецФункции

// Инициализация работы библиотеки.
// Задает минимальные настройки.
//
Процедура Инициализация()
    
    Лог = Логирование.ПолучитьЛог("oscript.lib.gitrunner");
    
    СистемнаяИнформация = Новый СистемнаяИнформация;
    ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;
    
    УстановитьПутьКГит("git");
    
КонецПроцедуры

Инициализация();
