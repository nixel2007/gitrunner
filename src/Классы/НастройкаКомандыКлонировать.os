Перем URLРепозитория;
Перем ПараметрыКоманды;
Перем КаталогКлонирования;

// Функция возвращает массив параметров выполнения команды git
//
Функция ПолучитьПараметрыКоманды() Экспорт
	
	МассивПараметров = Новый Массив;
		
	Для каждого Настройка Из ПараметрыКоманды Цикл

		УстановитьПараметрКоманды(МассивПараметров, Настройка.Ключ, Настройка.Значение);
		
	КонецЦикла;

	Если ЗначениеЗаполнено(URLРепозитория) Тогда
		МассивПараметров.Добавить(URLРепозитория);
	КонецЕслИ;

	Если ЗначениеЗаполнено(КаталогКлонирования) Тогда
		МассивПараметров.Добавить(КаталогКлонирования);
	КонецЕслИ;
	
	Возврат МассивПараметров;
	
КонецФункции // ПолучитьНастройкиКоманды() Экспорт

// Процедура устанавливает URL репозитория git в настройками отправки
//
//  Параметры
//     НовыйURLРепозитория - Строка - значение URL git репозитория или имя внешнего репозитория  
//	
Процедура УстановитьURLРепозиторияКлонирования(Знач НовыйURLРепозитория) Экспорт

	URLРепозитория = НовыйURLРепозитория;
	
КонецПроцедуры // УстановитьРепозиторийОтправки()

// Процедура устанавливает каталог рабочей копии репозитория git в настройками клонирования
//
//  Параметры
//     НовыйКаталогКлонирования - Строка - значение URL git репозитория или имя внешнего репозитория  
//	
Процедура УстановитьКаталогКлонирования(Знач НовыйКаталогКлонирования) Экспорт

	КаталогКлонирования = НовыйКаталогКлонирования;
	
КонецПроцедуры // УстановитьРепозиторийОтправки()

// Процедура устанавливает параметры команды в настройки отправки
//
//  Параметры
//     Параметры - Соответвие - Соответвие настроек команды (ключ - имя параметра, значение - булево)  
//
Процедура УстановитьПараметрыКомандыКлонирования(Знач Параметры) Экспорт
	
	ПараметрыКоманды = Параметры;

КонецПроцедуры

// Процедура устанавливает параметры режима зеркала выполнения команды в настройки 
//  --mirror
//  Параметры
//     ЗначениеУстановки - булево - По умолчанию Истина 
Процедура РежимЗеркала(Знач ЗначениеУстановки = Истина) Экспорт
	
	УстановитьПроизвольныйРежим("--mirror", ЗначениеУстановки);
	
КонецПроцедуры 

// Процедура устанавливает параметры режима без рабочей выполнения команды в настройки 
//  --bare
//  Параметры
//     ЗначениеУстановки - булево - По умолчанию Истина 
Процедура РежимБезРабочейКопии(Знач ЗначениеУстановки = Истина) Экспорт
	
	УстановитьПроизвольныйРежим("--bare", ЗначениеУстановки);
	
КонецПроцедуры 


// Процедура устанавливает параметры глубина получения коммитов команды в настройки 
//  --depth
//  Параметры
//     ЗначениеУстановки - Число - По умолчанию 0 
Процедура ГлубинаКопии(Знач ЗначениеУстановки = 0) Экспорт
	
	УстановитьПроизвольныйРежим("--depth", ЗначениеУстановки);
	
КонецПроцедуры 


// Процедура устанавливает произвольную настройку при выполнении команды в настройки
//
//  Параметры
//     НаименованиеПараметра - строка - Наименование параметра настройки
//     ЗначениеУстановки - булево - По умолчанию Истина
Процедура УстановитьПроизвольныйРежим(Знач НаименованиеПараметра, Знач ЗначениеУстановки = Истина) Экспорт
		
	ПараметрыКоманды.Вставить(НаименованиеПараметра, ЗначениеУстановки);

КонецПроцедуры


Процедура УстановитьПараметрКоманды(МассивПараметров, Знач КлючПараметра, Знач ЗначениеПараметра)
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("булево") Тогда
		Если Не ЗначениеПараметра Тогда
			Возврат;
		КонецЕсли;
		МассивПараметров.Добавить(КлючПараметра);
	Иначе
		МассивПараметров.Добавить(КлючПараметра);
		МассивПараметров.Добавить(ЗначениеПараметра);
	КонецЕсли;

КонецПроцедуры


Процедура ЗаполнитьНастройкиПоУмолчанию()
	
	Отключить = Ложь;
	ПараметрыКоманды = Новый Соответствие;
	
	РежимБезРабочейКопии(Отключить);
	РежимЗеркала(Отключить);
	
	URLРепозитория = "";
	
КонецПроцедуры

Процедура Инициализация()
	
	Лог = Логирование.ПолучитьЛог("oscript.lib.gitrunner");
	ЗаполнитьНастройкиПоУмолчанию();
	
КонецПроцедуры

Инициализация();
